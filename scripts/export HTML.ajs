/*
 * Export To HTML
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * 
 * (c) 2023 Danny Greefhorst
 *
 */

// Show output in the console
console.show();
console.clear();
console.log("> Start HTML Export");

var propertiesList = [];
var textList = [];
var fullTextList = [];
var elementNamesList = [];
var elementTextList = [];
var elementFullTextList = [];
var elementname = "";

var relationshipTypeMappings = {
    "access-relationship":"gebruikt",
	"aggregation-relationship": "groepeert",
    "composition-relationship":"bestaat uit",
    "flow-relationship":"levert gegevens aan",
    "realization-relationship":"realiseert",
    "assignment-relationship":"is toegekend aan",
    "serving-relationship":"ondersteunt",
    "association-relationship":"is gerelateerd aan",
    "specialization-relationship":"specialiseert"
}

var elementTypeMappings = {
    "business-function":"Bedrijfsfunctie",
    "business-object":"Bedrijfsobject",
	"business-role":"Rol",
    "assessment":"knelpunt",
    "application-component":"Voorziening",
	"driverBeleid":"Beleid",
	"driverOntwikkeling":"Ontwikkeling",
    "requirement":"Richtlijn",
    "principle":"Principe",
    "constraintStandaard":"Standaard",
    "constraintWetgeving":"Wet- en regelgeving",
	"meaning": "Begrip",
    "grouping": "Groep",
	"work-package": "Veranderinitiatief"
}

var elementTypePluralMappings = {
    "business-function":"bedrijfsfuncties",
    "business-object":"bedrijfsobjecten",
	"business-role":"rollen",
    "assessment":"knelpunten",
    "application-component":"voorzieningen",
	"driverBeleid":"beleid",
	"driverOntwikkeling":"ontwikkelingen",
	"requirement":"richtlijnen",
	"principle":"principes",
	"constraintStandaard":"standaarden",
	"constraintWetgeving":"wetten",
	"meaning":"begrippen",
	"grouping": "groepen",
	"work-package": "veranderinitiatieven"
}

var elementTypes = ["business-function", "business-object", "business-role", "assessment", "application-component", "driverBeleid", "driverOntwikkeling", "requirement", "principle", "constraintStandaard", "constraintWetgeving", "meaning", "grouping", "work-package"];

var dirPath = window.promptOpenDirectory({ title: "Kies output directory"});

function getHeader(name) {
    var text = "<html class=\"frame\"><head>";
	text += "<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">";
	text += "<title>"+name+"</title>";
	text += "<script type=\"text/javascript\" src=\"../../lib/jquery/js/jquery-1.11.2.min.js\"></script>";
	text += "<link type=\"text/css\" rel=\"stylesheet\" href=\"../../lib/bootstrap/css/bootstrap.min.yeti.css\">";
	text += "<script type=\"text/javascript\" src=\"../../lib/bootstrap/js/bootstrap-3.3.2.min.js\"></script>";
	text += "<link type=\"text/css\" rel=\"stylesheet\" href=\"../../lib/bootstrap/css/bootstrap.min.yeti.css\">";
	text += "<link type=\"text/css\" rel=\"stylesheet\" href=\"../../css/model.css\">";
	text += "<script type=\"text/javascript\" src=\"../../js/frame2.js\"></script>";
	text += "</head><body>";
	text += "<div class=\"panel panel-default root-panel\">";
	text += "<div class=\"panel-heading root-panel-heading\">";
    text += "<b>"+name+"</b>";
	text += "</div>";
	text += "<div class=\"panel-body root-panel-body\">";
	return text;
}

function getTableStart() {
	return "<table class=\"table table-striped table-hover table-condensed\"><tbody>";
}

function getTableEnd() {
	return "</tbody></table>";
}

function getFooter(id) {
	return "<p style=\"font-size:5px;text-align:right\">"+id+"</p></div></div></body></html>";
}

function getRelationshipProperties (r) {
	var proptext = "";
	var first = true;
	for (var i=0; i<r.prop().length; i++){
		if (first) proptext = "- "; else proptext += ", ";
		proptext += r.prop()[i] + " = " + r.prop(r.prop()[i]);
		first = false;
    }
	return proptext;
}

function writeFile(id, contents) {
    try {
		$.fs.writeFile(dirPath+"\\"+id+".html", contents);
	} catch(err) {
		console.error(err);
	}
}

function getFullType(type, specialization) {
	if (specialization) 
		return type+specialization;
	else
		return type
}

for (var i=0; i<elementTypes.length; i++) {
	var elementtypename = elementTypePluralMappings[elementTypes[i]];
	var ucelementtypename = elementtypename.slice(0,1).toUpperCase()+elementtypename.slice(1,elementtypename.length);
	if (elementTypes[i] == "meaning")
		textList[elementTypes[i]] = getHeader(ucelementtypename)+getTableStart()+"<tr><td width=200>Naam</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">Definitie</td></tr>";
	else if (elementTypes[i] == "principle")
		textList[elementTypes[i]] = getHeader(ucelementtypename)+getTableStart()+"<tr><td width=200>Naam</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">Rationale</td></tr>";
	else
		textList[elementTypes[i]] = getHeader(ucelementtypename)+getTableStart()+"<tr><td width=200>Naam</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">Omschrijving</td></tr>";		
	fullTextList[elementTypes[i]] = getHeader(ucelementtypename);
	elementNamesList[elementTypes[i]] = [];
	elementTextList[elementTypes[i]] = [];
	elementFullTextList[elementTypes[i]] = [];
}

$("element").each(function(e) {
	if (e.prop("exclude")!=null) { return; }

	elementNamesList[getFullType(e.type, e.specialization)].push(e.name);
	elementTextList[getFullType(e.type, e.specialization)][e.name] = "<tr><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\"><a href=\"..\\elements\\"+e.id+".html\">"+e.name+"</a></td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">"+e.documentation+"</tr>";

	var theProperties = e.prop();  

	for (var i=0; i<theProperties.length; i++){
		var found = false;
		for (var j=0; j<propertiesList.length; j++) {
			if (propertiesList[j]==theProperties[i]) {
				found=true;
			}
		}
		if (!found) {
			propertiesList.push(theProperties[i]);
		}
    }

	var elementtypename = elementTypePluralMappings[getFullType(e.type, e.specialization)];
	var ucelementtypename = elementtypename.slice(0,1).toUpperCase()+elementtypename.slice(1,elementtypename.length);
    var text = "";
	if (e.type == "meaning")
		text += "<tr><td width=200>Definitie</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">"+e.documentation+"</td></tr>";
	else if (e.type == "principle")
		text += "<tr><td width=200>Rationale</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">"+e.documentation+"</td></tr>";
	else
		text += "<tr><td width=200>Omschrijving</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">"+e.documentation+"</td></tr>";	

	for (var i=0; i<propertiesList.length; i++){
        if (e.prop(propertiesList[i]) && propertiesList[i] != "ID") {
			properties = e.prop(propertiesList[i], true);
			if (properties.constructor == Array) {
				text += "<tr><td>"+ propertiesList[i]+ "</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">";
				var first = true;
				properties.forEach(function(f) {
					if (first)
						first = false
					else
						text+="<br>";
					text += f;
				})
				text += "</td></tr>";
			}
			else
				text += "<tr><td>"+ propertiesList[i]+ "</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">"+properties+"</td></tr>";
        }
    }

	for (var i=0; i<elementTypes.length; i++) {
		var first = true;
		var found = false;
		$(e).outRels().each(function (r) {
			if (r.prop("Type before conversion")) r.removeProp("Type before conversion");
			if (getFullType(r.target.type,r.target.specialization) == elementTypes[i]) { 
				if (first) {
					text += "<tr><td>Relatie met "+(!elementTypePluralMappings[getFullType(r.target.type,r.target.specialization)]?e.type:elementTypePluralMappings[getFullType(r.target.type,r.target.specialization)])+"</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">";
					first = false;
					found = true;
				}
				text += "[...] "+(!relationshipTypeMappings[r.type]?e.type:relationshipTypeMappings[r.type])+" <a href=\"..\\elements\\"+r.target.id+".html\">"+r.target.name+"</a>"+(r.name?(" ("+r.name+") "):"")+getRelationshipProperties(r)+"<br>";
			}
		});
		$(e).inRels().each(function (r) {
			if (r.prop("Type before conversion")) r.removeProp("Type before conversion");
			if (getFullType(r.source.type,r.source.specialization) == elementTypes[i]) { 
				if (first) {
					text += "<tr><td>Relatie met "+(!elementTypePluralMappings[getFullType(r.source.type,r.source.specialization)]?e.type:elementTypePluralMappings[getFullType(r.source.type,r.source.specialization)])+"</td><td class=\"convertlinks no-margin\" style=\"white-space:pre-wrap\">";
					first = false;
					found = true;
				}
				text += "<a href=\"..\\elements\\"+r.source.id+".html\">"+r.source.name+"</a> "+(!relationshipTypeMappings[r.type]?e.type:relationshipTypeMappings[r.type])+"  [...] "+(r.name?(" ("+r.name+") "):"")+getRelationshipProperties(r)+"<br>";
			}
		});
		if (found) {
			text += "</td></tr>";
		}
	};

	elementFullTextList[getFullType(e.type, e.specialization)][e.name] = "<b>" + e.name + "</b><br><br>"+ getTableStart() + text + getTableEnd();
	text = getHeader(ucelementtypename + " > " + e.name) + getTableStart() + text + getTableEnd() + getFooter(e.id);
	writeFile("elements\\"+e.id, text);

});

// bestanden per elementtype maken, met gesorteerde lijst van elementen
for (var i=0; i<elementTypes.length; i++) {
	elementNamesList[elementTypes[i]].sort();
	for (j=0; j<elementNamesList[elementTypes[i]].length; j++) {
		elementname = elementNamesList[elementTypes[i]][j];
		textList[elementTypes[i]] += elementTextList[elementTypes[i]][elementname]; 
		fullTextList[elementTypes[i]] += elementFullTextList[elementTypes[i]][elementname]; 
	}
	textList[elementTypes[i]] += getTableEnd() + getFooter("");
	fullTextList[elementTypes[i]] += getFooter("");
	writeFile("views\\" + elementTypePluralMappings[elementTypes[i]], textList[elementTypes[i]]);
	writeFile("views\\" + elementTypePluralMappings[elementTypes[i]] + "details", fullTextList[elementTypes[i]]);
}

console.log("> End HTML Export");
